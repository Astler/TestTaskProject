//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/CanonInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace GameInput
{
    public partial class @CanonInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @CanonInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""CanonInput"",
    ""maps"": [
        {
            ""name"": ""Canon"",
            ""id"": ""dfa932d8-f140-4332-9ee2-525381f3aded"",
            ""actions"": [
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""3f0f86d2-dc52-475a-8369-e055ee074530"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""97ffc534-adf0-4f6a-ab01-894119f5e31b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a7a78fa-4d92-4569-9845-8b19097813b0"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MainConstrolScheme"",
            ""bindingGroup"": ""MainConstrolScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Pointer>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Canon
            m_Canon = asset.FindActionMap("Canon", throwIfNotFound: true);
            m_Canon_Aim = m_Canon.FindAction("Aim", throwIfNotFound: true);
        }

        ~@CanonInput()
        {
            UnityEngine.Debug.Assert(!m_Canon.enabled, "This will cause a leak and performance issues, CanonInput.Canon.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Canon
        private readonly InputActionMap m_Canon;
        private List<ICanonActions> m_CanonActionsCallbackInterfaces = new List<ICanonActions>();
        private readonly InputAction m_Canon_Aim;
        public struct CanonActions
        {
            private @CanonInput m_Wrapper;
            public CanonActions(@CanonInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Aim => m_Wrapper.m_Canon_Aim;
            public InputActionMap Get() { return m_Wrapper.m_Canon; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CanonActions set) { return set.Get(); }
            public void AddCallbacks(ICanonActions instance)
            {
                if (instance == null || m_Wrapper.m_CanonActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CanonActionsCallbackInterfaces.Add(instance);
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
            }

            private void UnregisterCallbacks(ICanonActions instance)
            {
                @Aim.started -= instance.OnAim;
                @Aim.performed -= instance.OnAim;
                @Aim.canceled -= instance.OnAim;
            }

            public void RemoveCallbacks(ICanonActions instance)
            {
                if (m_Wrapper.m_CanonActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICanonActions instance)
            {
                foreach (var item in m_Wrapper.m_CanonActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CanonActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CanonActions @Canon => new CanonActions(this);
        private int m_MainConstrolSchemeSchemeIndex = -1;
        public InputControlScheme MainConstrolSchemeScheme
        {
            get
            {
                if (m_MainConstrolSchemeSchemeIndex == -1) m_MainConstrolSchemeSchemeIndex = asset.FindControlSchemeIndex("MainConstrolScheme");
                return asset.controlSchemes[m_MainConstrolSchemeSchemeIndex];
            }
        }
        public interface ICanonActions
        {
            void OnAim(InputAction.CallbackContext context);
        }
    }
}
