//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/CanonInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace GameInput
{
    public partial class @CanonInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @CanonInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""CanonInput"",
    ""maps"": [
        {
            ""name"": ""Canon"",
            ""id"": ""dfa932d8-f140-4332-9ee2-525381f3aded"",
            ""actions"": [
                {
                    ""name"": ""AimDelta"",
                    ""type"": ""Value"",
                    ""id"": ""3f0f86d2-dc52-475a-8369-e055ee074530"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shot"",
                    ""type"": ""Button"",
                    ""id"": ""8df68689-1115-46c1-a3d0-bbd445127de0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AimCompose"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2e088b57-a2c6-487b-8bbd-01ab8f117f71"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3712f0e2-5c06-469a-bce8-5fa588a72c23"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardControlScheme"",
                    ""action"": ""Shot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f93ee35b-27b9-4a2f-b6a9-f7cb3b24087d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";MainControlScheme"",
                    ""action"": ""Shot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e17e39c-c34e-491d-8c1e-8c64dd0f80d6"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MainControlScheme"",
                    ""action"": ""AimDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9b4f0a07-7ec4-47f3-9619-0fd70d7c4d7e"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=20,y=20)"",
                    ""groups"": """",
                    ""action"": ""AimCompose"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3a147739-56e3-4957-b7aa-ccb7382100f9"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardControlScheme"",
                    ""action"": ""AimCompose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f9e9a4cb-d57d-4b62-abf8-0d657b416096"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardControlScheme"",
                    ""action"": ""AimCompose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""37d75edd-acc7-4f08-85c9-7f6177903282"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardControlScheme"",
                    ""action"": ""AimCompose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d2c70218-ff66-462e-bd05-7d99c70a37c6"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardControlScheme"",
                    ""action"": ""AimCompose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0ef8eb3f-5763-4818-8452-8cbdaf892520"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimCompose"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""68ade293-d8e3-4e14-91e0-5b2ac222f4bc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimCompose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7dbcb0c8-3d0e-43cd-ac8a-f7bc48c9600d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimCompose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e516b1f7-493e-43fd-9bf6-53e65e3846dd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimCompose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5e05c7ae-32ba-48a7-8dbe-c3ba7305567d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimCompose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MainControlScheme"",
            ""bindingGroup"": ""MainControlScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Pointer>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""KeyboardControlScheme"",
            ""bindingGroup"": ""KeyboardControlScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Canon
            m_Canon = asset.FindActionMap("Canon", throwIfNotFound: true);
            m_Canon_AimDelta = m_Canon.FindAction("AimDelta", throwIfNotFound: true);
            m_Canon_Shot = m_Canon.FindAction("Shot", throwIfNotFound: true);
            m_Canon_AimCompose = m_Canon.FindAction("AimCompose", throwIfNotFound: true);
        }

        ~@CanonInput()
        {
            UnityEngine.Debug.Assert(!m_Canon.enabled, "This will cause a leak and performance issues, CanonInput.Canon.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Canon
        private readonly InputActionMap m_Canon;
        private List<ICanonActions> m_CanonActionsCallbackInterfaces = new List<ICanonActions>();
        private readonly InputAction m_Canon_AimDelta;
        private readonly InputAction m_Canon_Shot;
        private readonly InputAction m_Canon_AimCompose;
        public struct CanonActions
        {
            private @CanonInput m_Wrapper;
            public CanonActions(@CanonInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @AimDelta => m_Wrapper.m_Canon_AimDelta;
            public InputAction @Shot => m_Wrapper.m_Canon_Shot;
            public InputAction @AimCompose => m_Wrapper.m_Canon_AimCompose;
            public InputActionMap Get() { return m_Wrapper.m_Canon; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CanonActions set) { return set.Get(); }
            public void AddCallbacks(ICanonActions instance)
            {
                if (instance == null || m_Wrapper.m_CanonActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CanonActionsCallbackInterfaces.Add(instance);
                @AimDelta.started += instance.OnAimDelta;
                @AimDelta.performed += instance.OnAimDelta;
                @AimDelta.canceled += instance.OnAimDelta;
                @Shot.started += instance.OnShot;
                @Shot.performed += instance.OnShot;
                @Shot.canceled += instance.OnShot;
                @AimCompose.started += instance.OnAimCompose;
                @AimCompose.performed += instance.OnAimCompose;
                @AimCompose.canceled += instance.OnAimCompose;
            }

            private void UnregisterCallbacks(ICanonActions instance)
            {
                @AimDelta.started -= instance.OnAimDelta;
                @AimDelta.performed -= instance.OnAimDelta;
                @AimDelta.canceled -= instance.OnAimDelta;
                @Shot.started -= instance.OnShot;
                @Shot.performed -= instance.OnShot;
                @Shot.canceled -= instance.OnShot;
                @AimCompose.started -= instance.OnAimCompose;
                @AimCompose.performed -= instance.OnAimCompose;
                @AimCompose.canceled -= instance.OnAimCompose;
            }

            public void RemoveCallbacks(ICanonActions instance)
            {
                if (m_Wrapper.m_CanonActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICanonActions instance)
            {
                foreach (var item in m_Wrapper.m_CanonActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CanonActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CanonActions @Canon => new CanonActions(this);
        private int m_MainControlSchemeSchemeIndex = -1;
        public InputControlScheme MainControlSchemeScheme
        {
            get
            {
                if (m_MainControlSchemeSchemeIndex == -1) m_MainControlSchemeSchemeIndex = asset.FindControlSchemeIndex("MainControlScheme");
                return asset.controlSchemes[m_MainControlSchemeSchemeIndex];
            }
        }
        private int m_KeyboardControlSchemeSchemeIndex = -1;
        public InputControlScheme KeyboardControlSchemeScheme
        {
            get
            {
                if (m_KeyboardControlSchemeSchemeIndex == -1) m_KeyboardControlSchemeSchemeIndex = asset.FindControlSchemeIndex("KeyboardControlScheme");
                return asset.controlSchemes[m_KeyboardControlSchemeSchemeIndex];
            }
        }
        public interface ICanonActions
        {
            void OnAimDelta(InputAction.CallbackContext context);
            void OnShot(InputAction.CallbackContext context);
            void OnAimCompose(InputAction.CallbackContext context);
        }
    }
}
